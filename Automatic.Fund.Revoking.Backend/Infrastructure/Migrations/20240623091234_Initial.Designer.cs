// <auto-generated />
using System;
using Infrastructure.Persistence.Providers.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(FundContext))]
    [Migration("20240623091234_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Audit.OrderHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AppName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BackOfficeOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CustomerAccountBankId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerAccountSheba")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerNationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("OrderStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("OrderStatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("TotalUnits")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderHistories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BackOfficeBankId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderClassName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Banks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackOfficeBankId = 1,
                            IsEnabled = false,
                            Name = "اقتصاد نوين",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 2,
                            BackOfficeBankId = 2,
                            IsEnabled = false,
                            Name = "تجارت",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 3,
                            BackOfficeBankId = 3,
                            IsEnabled = false,
                            Name = "توسعه صادرات",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 4,
                            BackOfficeBankId = 4,
                            IsEnabled = false,
                            Name = "رفاه كارگران",
                            ProviderClassName = "Infrastructure.Services.ThirdParties.Banks.RefahBankingProviderService, Infrastructure"
                        },
                        new
                        {
                            Id = 5,
                            BackOfficeBankId = 5,
                            IsEnabled = false,
                            Name = "سامان",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 6,
                            BackOfficeBankId = 6,
                            IsEnabled = false,
                            Name = "سرمايه",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 7,
                            BackOfficeBankId = 7,
                            IsEnabled = false,
                            Name = "سپه",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 8,
                            BackOfficeBankId = 8,
                            IsEnabled = false,
                            Name = "صادرات",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 9,
                            BackOfficeBankId = 9,
                            IsEnabled = false,
                            Name = "صنعت و معدن",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 10,
                            BackOfficeBankId = 10,
                            IsEnabled = false,
                            Name = "مسكن",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 11,
                            BackOfficeBankId = 11,
                            IsEnabled = false,
                            Name = "ملت",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 12,
                            BackOfficeBankId = 12,
                            IsEnabled = false,
                            Name = "ملي",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 13,
                            BackOfficeBankId = 13,
                            IsEnabled = false,
                            Name = "موسسه اعتباري بنياد",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 14,
                            BackOfficeBankId = 14,
                            IsEnabled = false,
                            Name = "قوامين",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 15,
                            BackOfficeBankId = 15,
                            IsEnabled = false,
                            Name = "پارسيان",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 16,
                            BackOfficeBankId = 16,
                            IsEnabled = true,
                            Name = "پاسارگاد",
                            ProviderClassName = "Infrastructure.Services.ThirdParties.Banks.PasargadBankingProviderService, Infrastructure"
                        },
                        new
                        {
                            Id = 17,
                            BackOfficeBankId = 17,
                            IsEnabled = false,
                            Name = "كارآفرين",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 18,
                            BackOfficeBankId = 18,
                            IsEnabled = false,
                            Name = "كشاورزي",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 19,
                            BackOfficeBankId = 19,
                            IsEnabled = false,
                            Name = "شهر",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 20,
                            BackOfficeBankId = 20,
                            IsEnabled = false,
                            Name = "مركزي",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 21,
                            BackOfficeBankId = 21,
                            IsEnabled = false,
                            Name = "پست بانك",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 22,
                            BackOfficeBankId = 22,
                            IsEnabled = false,
                            Name = "موسسه اعتباري مهر",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 23,
                            BackOfficeBankId = 23,
                            IsEnabled = false,
                            Name = "انصار",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 24,
                            BackOfficeBankId = 24,
                            IsEnabled = false,
                            Name = "سينا",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 25,
                            BackOfficeBankId = 25,
                            IsEnabled = false,
                            Name = "صندوق تعاون",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 26,
                            BackOfficeBankId = 26,
                            IsEnabled = false,
                            Name = "موسسه اعتباري توسعه",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 27,
                            BackOfficeBankId = 27,
                            IsEnabled = false,
                            Name = "موسسه مالي مولي الموحدين",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 28,
                            BackOfficeBankId = 28,
                            IsEnabled = false,
                            Name = "موسسه اعتباری ملل",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 29,
                            BackOfficeBankId = 29,
                            IsEnabled = false,
                            Name = "موسسه اعتباري ثامن الائمه ",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 30,
                            BackOfficeBankId = 30,
                            IsEnabled = false,
                            Name = "آينده",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 32,
                            BackOfficeBankId = 32,
                            IsEnabled = false,
                            Name = "تعاوني اعتبار صالحين",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 33,
                            BackOfficeBankId = 33,
                            IsEnabled = false,
                            Name = "دي",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 34,
                            BackOfficeBankId = 34,
                            IsEnabled = false,
                            Name = "قرض الحسنه باب الحوائج ",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 35,
                            BackOfficeBankId = 35,
                            IsEnabled = false,
                            Name = "گردشگري",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 36,
                            BackOfficeBankId = 36,
                            IsEnabled = false,
                            Name = "توسعه تعاون",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 37,
                            BackOfficeBankId = 37,
                            IsEnabled = false,
                            Name = "ايران زمين",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 38,
                            BackOfficeBankId = 38,
                            IsEnabled = false,
                            Name = "موسسه اعتباري پيشگامان",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 40,
                            BackOfficeBankId = 40,
                            IsEnabled = false,
                            Name = "مؤسسه مالي و اعتباري آتي",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 41,
                            BackOfficeBankId = 41,
                            IsEnabled = false,
                            Name = "موسسه اعتباري ثامن الحجج",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 42,
                            BackOfficeBankId = 42,
                            IsEnabled = false,
                            Name = "موسسه مالي و اعتباري صالحين",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 43,
                            BackOfficeBankId = 43,
                            IsEnabled = false,
                            Name = "حكمت ايرانيان",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 44,
                            BackOfficeBankId = 44,
                            IsEnabled = false,
                            Name = "موسسه مالي و اعتباري فردوسي",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 45,
                            BackOfficeBankId = 45,
                            IsEnabled = false,
                            Name = "خاورميانه",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 46,
                            BackOfficeBankId = 46,
                            IsEnabled = false,
                            Name = "موسسه مالي و اعتباري رضوي",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 47,
                            BackOfficeBankId = 47,
                            IsEnabled = false,
                            Name = "قرض الحسنه مهر ايران",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 48,
                            BackOfficeBankId = 48,
                            IsEnabled = false,
                            Name = "قرض الحسنه رسالت",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 49,
                            BackOfficeBankId = 49,
                            IsEnabled = false,
                            Name = "مهر اقتصاد",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 50,
                            BackOfficeBankId = 50,
                            IsEnabled = false,
                            Name = "موسسه مالي و اعتباري کوثر",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 51,
                            BackOfficeBankId = 51,
                            IsEnabled = false,
                            Name = "مبنا",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 52,
                            BackOfficeBankId = 52,
                            IsEnabled = false,
                            Name = "پرشين",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 53,
                            BackOfficeBankId = 53,
                            IsEnabled = false,
                            Name = "موسسه اعتباری افضل توس",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 55,
                            BackOfficeBankId = 55,
                            IsEnabled = false,
                            Name = "موسسه اعتباری نور",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 56,
                            BackOfficeBankId = 56,
                            IsEnabled = false,
                            Name = "بانک مشترک ايران و ونزوئلا",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 99,
                            BackOfficeBankId = 99,
                            IsEnabled = false,
                            Name = "عابر بانك",
                            ProviderClassName = ""
                        },
                        new
                        {
                            Id = 100,
                            BackOfficeBankId = 100,
                            IsEnabled = false,
                            Name = "نامشخص",
                            ProviderClassName = ""
                        });
                });

            modelBuilder.Entity("Domain.Entities.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<int>("FundId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<string>("ShebaNumber")
                        .HasMaxLength(27)
                        .HasColumnType("nvarchar(27)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("FundId");

                    b.ToTable("BankAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountNumber = "415.8100.41581000.1",
                            Balance = 0m,
                            BankId = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 0L,
                            FundId = 1,
                            IsDeleted = false,
                            IsEnabled = true,
                            ShebaNumber = "IR510570041581041581000101"
                        },
                        new
                        {
                            Id = 2,
                            AccountNumber = "203.110.1419864.1",
                            Balance = 0m,
                            BankId = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 0L,
                            FundId = 1,
                            IsDeleted = false,
                            IsEnabled = true,
                            ShebaNumber = "IR190570077700101016288301"
                        });
                });

            modelBuilder.Entity("Domain.Entities.BankPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("BankPaymentMethodId")
                        .HasColumnType("tinyint");

                    b.Property<string>("BankUniqueId")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DestinationBankId")
                        .HasColumnType("int");

                    b.Property<string>("DestinationShebaNumber")
                        .HasMaxLength(27)
                        .IsUnicode(false)
                        .HasColumnType("varchar(27)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("SourceBankAccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<byte>("TransactionStatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("DestinationBankId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SourceBankAccountId");

                    b.ToTable("BankPayments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BackOfficeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FundId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("TradingCode")
                        .HasMaxLength(11)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("BackOfficeId")
                        .IsUnique();

                    b.HasIndex("FundId");

                    b.HasIndex("MobileNumber");

                    b.HasIndex("NationalCode");

                    b.HasIndex("TradingCode");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CustomerBankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<string>("ShebaNumber")
                        .HasMaxLength(27)
                        .HasColumnType("nvarchar(27)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBankAccounts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Fund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DsCode")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Funds", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DsCode = 10784,
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "صندوق حکمت"
                        },
                        new
                        {
                            Id = 2,
                            DsCode = 11111,
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "..."
                        });
                });

            modelBuilder.Entity("Domain.Entities.Limitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<byte>("LimitationTypeId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Limitations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 0L,
                            LimitationTypeId = (byte)1,
                            Title = "پیش از ثبت سفارش"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 0L,
                            LimitationTypeId = (byte)2,
                            Title = "پیش از پرداخت"
                        });
                });

            modelBuilder.Entity("Domain.Entities.LimitationComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Error")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("LimitationComponentTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("LimitationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LimitationId");

                    b.ToTable("LimitationComponents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 0L,
                            Enabled = false,
                            Error = "تعداد واحدها بیشتر از بازه تعیین شده است",
                            LimitationComponentTypeId = (byte)2,
                            LimitationId = 1,
                            Title = "چک کردن حداکثر تعداد واحد",
                            Value = "1000"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 0L,
                            Enabled = false,
                            Error = "تعداد واحدها کمتر از بازه تعیین شده است",
                            LimitationComponentTypeId = (byte)3,
                            LimitationId = 1,
                            Title = "چک کردن حداقل تعداد واحد",
                            Value = "1"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 0L,
                            Enabled = false,
                            Error = "مبلغ درخواست کمتر از بازه تعیین شده است",
                            LimitationComponentTypeId = (byte)4,
                            LimitationId = 1,
                            Title = "چک کردن حداقل مبلغ درخواست",
                            Value = "100000"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 0L,
                            Enabled = false,
                            Error = "مبلغ درخواست بیشتر از بازه تعیین شده است",
                            LimitationComponentTypeId = (byte)5,
                            LimitationId = 1,
                            Title = "چک کردن حداکثر مبلغ درخواست",
                            Value = "1000000000"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 0L,
                            Enabled = true,
                            Error = "ارایه سرویس به کاربر جاری ممکن نیست",
                            LimitationComponentTypeId = (byte)6,
                            LimitationId = 1,
                            Title = "لیست کاربران مجاز",
                            Value = "[158,31130]"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 0L,
                            Enabled = true,
                            Error = "ارایه سرویس به سامانه جاری مجاز نیست",
                            LimitationComponentTypeId = (byte)7,
                            LimitationId = 1,
                            Title = "لیست سامانه های مجاز",
                            Value = "[\"fund_site\"]"
                        },
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedById = 0L,
                            Enabled = true,
                            Error = "موجودی حساب کافی نیست",
                            LimitationComponentTypeId = (byte)1,
                            LimitationId = 2,
                            Title = "چک کردن موجودی حساب",
                            Value = "{ \"MinBalance\": 100000000 }"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AppCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<int>("CustomerAccountBankId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerAccountNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CustomerAccountSheba")
                        .HasMaxLength(27)
                        .IsUnicode(false)
                        .HasColumnType("varchar(27)");

                    b.Property<string>("CustomerFullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerNationalCode")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<string>("OrderStatusDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("OrderStatusId")
                        .HasColumnType("tinyint");

                    b.Property<long>("RayanFundOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("TotalUnits")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountBankId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RayanFundOrderId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ThirdParties.RayanCustomer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BirthCertificationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BirthDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("BourseCode")
                        .HasMaxLength(11)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CustomerFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<string>("NationalIdentifier")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Personality")
                        .HasMaxLength(25)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Representative")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CellPhone");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("RayanCustomers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ThirdParties.RayanFundOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AppuserName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<string>("CreationDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CreationTime")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DlNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<long>("FixWage")
                        .HasColumnType("bigint");

                    b.Property<string>("FoStatusName")
                        .HasMaxLength(25)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("FundIssueOriginName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FundIssueTypeName")
                        .HasMaxLength(25)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(25)");

                    b.Property<long>("FundOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("FundOrderNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("FundUnit")
                        .HasColumnType("int");

                    b.Property<long>("GuaranteeAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("LicenseDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<long>("LicenseNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("bigint");

                    b.Property<string>("ModificationDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ModificationTime")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<long?>("OrderAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("OrderDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("OrderPaymentTypeName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrderType")
                        .HasMaxLength(25)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ReceiptComment")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ReceiptNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<long?>("UnitPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<long>("VariableWage")
                        .HasColumnType("bigint");

                    b.Property<long?>("VatAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("VoucherNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("VoucherTempNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("customerAccountNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FundOrderId")
                        .IsUnique();

                    b.ToTable("RayanFundOrders", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Audit.OrderHistory", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.BankAccount", b =>
                {
                    b.HasOne("Domain.Entities.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Fund", "Fund")
                        .WithMany("BankAccounts")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("Domain.Entities.BankPayment", b =>
                {
                    b.HasOne("Domain.Entities.Bank", "DestinationBank")
                        .WithMany("BankPayments")
                        .HasForeignKey("DestinationBankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.BankAccount", "SourceBankAccount")
                        .WithMany("BankPayments")
                        .HasForeignKey("SourceBankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationBank");

                    b.Navigation("Order");

                    b.Navigation("SourceBankAccount");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Domain.Entities.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fund");
                });

            modelBuilder.Entity("Domain.Entities.CustomerBankAccount", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.LimitationComponent", b =>
                {
                    b.HasOne("Domain.Entities.Limitation", "Limitation")
                        .WithMany("LimitationComponents")
                        .HasForeignKey("LimitationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Limitation");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Bank", "CustomerAccountBank")
                        .WithMany()
                        .HasForeignKey("CustomerAccountBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ThirdParties.RayanFundOrder", "RayanFundOrder")
                        .WithMany()
                        .HasForeignKey("RayanFundOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerAccountBank");

                    b.Navigation("RayanFundOrder");
                });

            modelBuilder.Entity("Domain.Entities.Bank", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("BankPayments");
                });

            modelBuilder.Entity("Domain.Entities.BankAccount", b =>
                {
                    b.Navigation("BankPayments");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Fund", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("Domain.Entities.Limitation", b =>
                {
                    b.Navigation("LimitationComponents");
                });
#pragma warning restore 612, 618
        }
    }
}
